[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/introduction.html",
    "href": "docs/introduction.html",
    "title": "1. Introduction",
    "section": "",
    "text": "Statistics is “the science of collecting, analyzing, presenting, and interpreting data” (Encyclopaedia Britannica, 2023). Presentation of data is a key means to support and guide interpretation and subsequent decision making. Techniques exist for effective display. This is what this guide is all about.\nGood data visualisation requires appreciation and careful consideration of the technical aspects of data presentation. But it also involves a creative element. Authorial choices are made about the “story” we want to tell, and design decisions are driven by the need to convey that story most effectively to our audience. Software systems use default settings for most graphical elements, however, each visualisation has its own story to tell, and so we must actively consider and choose settings for the visualisation under construction.\nThis guide covers both aspects of data visualisation: the art and the science. It is written primarily for contributors to Royal Statistical Society publications – chiefly, Significance magazine, the Journal of the Royal Statistical Society Series A, and Real World Data Science – but we hope you will find the information and advice within to be of broad relevance and use to any data visualisation task.\nOur overarching aim is to equip you, the reader, with the fundamentals for creating data visualisations that are high quality, readable, effective at conveying information, accurate in display and interpretation, and which fulfil their intended purpose.\nWe begin with a discussion of why we visualise data, and then set out the core principles of data visualisation. Next, we provide advice on which chart types are most appropriate for different types of data, and then explore the structure of charts and how those structures can be refined to aid readability. Finally, we look at styling charts, both generally and for RSS publications specifically.\nIn constructing this guide, we draw on many exceptional textbooks, papers, and other resources created by experts in the field. You will find references to these throughout and we encourage you to seek out the original sources if you are motivated to deepen your understanding and appreciation for the art and science of data visualisation."
  },
  {
    "objectID": "docs/introduction.html#about-this-guide",
    "href": "docs/introduction.html#about-this-guide",
    "title": "1. Introduction",
    "section": "",
    "text": "Statistics is “the science of collecting, analyzing, presenting, and interpreting data” (Encyclopaedia Britannica, 2023). Presentation of data is a key means to support and guide interpretation and subsequent decision making. Techniques exist for effective display. This is what this guide is all about.\nGood data visualisation requires appreciation and careful consideration of the technical aspects of data presentation. But it also involves a creative element. Authorial choices are made about the “story” we want to tell, and design decisions are driven by the need to convey that story most effectively to our audience. Software systems use default settings for most graphical elements, however, each visualisation has its own story to tell, and so we must actively consider and choose settings for the visualisation under construction.\nThis guide covers both aspects of data visualisation: the art and the science. It is written primarily for contributors to Royal Statistical Society publications – chiefly, Significance magazine, the Journal of the Royal Statistical Society Series A, and Real World Data Science – but we hope you will find the information and advice within to be of broad relevance and use to any data visualisation task.\nOur overarching aim is to equip you, the reader, with the fundamentals for creating data visualisations that are high quality, readable, effective at conveying information, accurate in display and interpretation, and which fulfil their intended purpose.\nWe begin with a discussion of why we visualise data, and then set out the core principles of data visualisation. Next, we provide advice on which chart types are most appropriate for different types of data, and then explore the structure of charts and how those structures can be refined to aid readability. Finally, we look at styling charts, both generally and for RSS publications specifically.\nIn constructing this guide, we draw on many exceptional textbooks, papers, and other resources created by experts in the field. You will find references to these throughout and we encourage you to seek out the original sources if you are motivated to deepen your understanding and appreciation for the art and science of data visualisation."
  },
  {
    "objectID": "docs/introduction.html#how-to-use-this-guide",
    "href": "docs/introduction.html#how-to-use-this-guide",
    "title": "1. Introduction",
    "section": "1.2 How to use this guide",
    "text": "1.2 How to use this guide\nWe designed this guide to be read from beginning to end, so that each section builds on the foundations of those that came before. If this is your first time reading the guide, we would encourage you to read it in this way. However, those looking for guidance on specific aspects of data visualisation can make use of the in-built search and navigation functions of this website. If you’d prefer to read offline, you can download a PDF version of the complete guide.\nThroughout the text you will find examples of charts and graphs. For many of these, we provide code in R to allow you to reproduce the visualisations, and we encourage you to do so and to adapt the code for your own purposes."
  },
  {
    "objectID": "docs/introduction.html#how-to-contribute-to-this-guide",
    "href": "docs/introduction.html#how-to-contribute-to-this-guide",
    "title": "1. Introduction",
    "section": "1.3 How to contribute to this guide",
    "text": "1.3 How to contribute to this guide\n[add section on how to contribute using GitHub repo, etc., once set up]"
  },
  {
    "objectID": "docs/introduction.html#how-to-engage-with-other-users-of-this-guide",
    "href": "docs/introduction.html#how-to-engage-with-other-users-of-this-guide",
    "title": "1. Introduction",
    "section": "1.4 How to engage with other users of this guide",
    "text": "1.4 How to engage with other users of this guide\n[add section on using GitHub discussions. Could also consider adding a comment functionality to section pages. Also need to include guidance on standards of discourse - e.g. be civil, no libellous comments, etc.]"
  },
  {
    "objectID": "docs/introduction.html#copyright-re-use-distribution-and-disclaimer",
    "href": "docs/introduction.html#copyright-re-use-distribution-and-disclaimer",
    "title": "1. Introduction",
    "section": "1.5 Copyright, re-use, distribution, and disclaimer",
    "text": "1.5 Copyright, re-use, distribution, and disclaimer\nThis guide is copyright © 2023 Andreas Krause, Nicola Rennie and the Royal Statistical Society. Unless otherwise stated, all copyright content in this guide is licensed under a Creative Commons Attribution 4.0 (CC BY 4.0) International licence, meaning it can be used and adapted for any purpose, provided attribution is given to the original authors. How to cite: Authors, Title, Version, URL.\nIf you’ve found this guide useful and want to make use of it or build on it for other purposes, please do so – and please share your work with us.\nNo warranty, use at your own risk, etc. See the R disclaimer for an example (“R comes with absolutely no warranty”)."
  },
  {
    "objectID": "docs/introduction.html#how-to-reach-us",
    "href": "docs/introduction.html#how-to-reach-us",
    "title": "1. Introduction",
    "section": "1.6 How to reach us",
    "text": "1.6 How to reach us\nHow can readers contact the authors?\n\nSubmit a GitHub issue\nEmail address?"
  },
  {
    "objectID": "docs/principles.html",
    "href": "docs/principles.html",
    "title": "3. Principles of data visualisation",
    "section": "",
    "text": "Data visualisations must serve a purpose. By understanding the purpose of a visualisation, we – as author or reader – are in a position to assess whether a visualisation succeeds in its aims or requires improvement.\nArguably the most common purpose of a visualisation is a comparison of groups of data, such as data on patients receiving different treatments. A good choice of axes, axis limits, labels and symbols can facilitate substantially the identification of patterns in the data, whereas  poor choices for any of these elements can substantially hamper the extraction of information."
  },
  {
    "objectID": "docs/principles.html#elements-of-data-visualisations",
    "href": "docs/principles.html#elements-of-data-visualisations",
    "title": "3. Principles of data visualisation",
    "section": "3.1 Elements of data visualisations",
    "text": "3.1 Elements of data visualisations\nVarious elements of a visualisation can contribute to the efficacy with which information can be distilled. All visualisation software packages will output graphics in a default style, but these will rarely, if ever, be the optimum choices for the data visualisation you are creating. When designing a data visualisation, one needs to consider the range of options available. Some of these options are discussed in what follows.\n\nLayout (panels, facets)\nThe layout (arrangement of multiple panels, facets, or subplots) is highly relevant for efficient comparison. If data on the y-axis are to be compared, a single y-axis with all panels aligned horizontally facilitates comparison, whereas for efficient comparison of x-axis values, panels should be stacked. Matrix layouts (multiple rows and columns in a single figure) should only be used if the data shown in individual panels are not related or space does not permit a single row or a single column (e.g., if there are too many panels to fit on a single row).\nExample: Figure 1 shows two different layouts of exactly the same data with exactly the same type of visualisation except for the layout. Note how difficult it is to compare the data across panels on the left-hand side, while it is easy with the layout on the right-hand side. The key difference is that the panels on the right share a common y-axis, which is key for comparison of y-values across panels.\n\n\nCode\n# ---\n# Data set creation.\n\nset.seed(93384)\n\ntime &lt;- c(0, 0.5, 1, 2, 4, 8, 12, 16, 24)\nn &lt;- 32 # no of subjects\n\ndata &lt;- expand.grid(ID=1:n, time=time)\n\nbw &lt;- data.frame(\n    ID=sort(unique(data$ID)),\n    bw=rlnorm(n, log(75), sdlog=0.25)\n)\n\nbw$bw.category &lt;- cut(bw$bw,\n    breaks=quantile(bw$bw, c(0, 0.33, 0.66, 1)), \n    labels=paste(c(\"low\", \"medium\", \"high\"), \"body weight\"), \n    include.lowest=TRUE)\n\ndata &lt;- merge(data, bw)\n\ndata &lt;- data[order(data$ID, data$time), ]\n\n# Simulate drug concentrations as a function of body weight.\ndata$conc &lt;- 100/(data$bw^1.0)*exp(-0.085*data$time)*\n    rlnorm(nrow(data), sdlog=0.25)+ # res. error\n    (data$ID-mean(data$ID))/mean(data$ID)/4 # r. eff\n\n# ---\n# Visualisation.\nlibrary(ggplot2)\n\ngg &lt;- list()\n\ndata$ID &lt;- factor(data$ID)\n\ngg[[\"3x1\"]] &lt;- ggplot(data, aes(x=time, y=conc, group=ID, color=ID)) + geom_line() \ngg[[\"3x1\"]] &lt;- gg[[\"3x1\"]] + scale_x_continuous(breaks=seq(0, 24, by=4)) \ngg[[\"3x1\"]] &lt;- gg[[\"3x1\"]] + theme_bw() + xlab(\"time [h]\") + ylab(\"drug concentration [ng/mL]\")\ngg[[\"3x1\"]] &lt;- gg[[\"3x1\"]] + facet_grid(bw.category ~ .)\ngg[[\"3x1\"]] &lt;- gg[[\"3x1\"]] + theme(legend.position=\"none\")\n\ngg[[\"1x3\"]] &lt;- gg[[\"3x1\"]] + facet_grid(. ~ bw.category)\n\n# Add space to the rhs of the first figure for better separation in the cowplot.\ngg[[\"3x1\"]] &lt;- gg[[\"3x1\"]] + theme(plot.margin = unit(c(0.5, 4, 0.5, 0.5), \"lines\"))\n\n\n# print(gg)\n\n# ---\n# Both figures into a single output figure.\n\nlibrary(cowplot)\nplot_grid(gg[[1]], gg[[2]], rel_widths=c(1.5, 2))\n\n\n\n\n\n\nFigure 1: A demonstration of the importance of panel layout for comparison across panels.\n\n\n\nAspect ratio\nOur visual perception of data in a display must not depend on the choice of x- and y-axes. In many cases, a square figure avoids visual bias. A square figure should be considered in particular if the two axes share a communality such as a measurement before and after some event, observed data vs model-predicted values or, more generally, the same units (such as kg or metres). Generally, a 1:1 aspect ratio (the physical length of 1 measurement unit in the x- and the y-direction) is a good default. If the figure has identical ranges for the x- and the y-axis, a 1:1 aspect ratio yields a square figure.\nExample: The three panels below all show the same data, aiming at enabling judgement about the goodness of a model fit (predicted vs observed values). Note the difference in visual perception between a stretched x-axis, a stretched y-axis, and a 1:1 aspect ratio (i.e., one unit in x and y corresponds to the same number of pixels) and identical axis limits (such that the figure is square). Other applications: any x and y that are to be compared.\n\n\nCode\n# Observed vs predicted (any data with comparable x and y will do).\n\n# ---\n# Data set.\n# Old Faithful Geyser (Yellowstone) data set with eruption duration\n#   and waiting time to the next eruption (both in minutes).\ndata &lt;- data.frame(\n    x=faithful$eruptions,\n    y=faithful$waiting\n)\n\n# ---\n# Regression model fit.\nfit &lt;- lm(y ~ x, data=data)\n\n# Addition of predicted values to the data set.\ndata$pred &lt;- predict(fit)\n\n# Range of y and y predicted combined.\nr &lt;- range(unlist(data[c(\"y\", \"pred\")]))\n\n# ---\n# Plotting.\n\nlibrary(ggplot2)\n\ngg &lt;- ggplot(data, aes(x=pred, y=y))\n\n# Adding the line of identity, y=x (note: plotting it first will add points on top).\ngg &lt;- gg + geom_abline(intercept=0, slope=1, color=\"black\", linewidth=1)\n\n# Adding points, removing grey background.\ngg &lt;- gg + geom_point() + theme_bw() \n\n# Adding linear OLS regression fit of y~x.\ngg &lt;- gg + geom_smooth(method=\"loess\", color=\"firebrick\", se=FALSE)\n\n# Adding axis labels.\ngg &lt;- gg + xlab(\"predicted\") + ylab(\"observed\")\n\n# Transpose (flip coordinates)\ngg2 &lt;- gg + coord_flip()\n\n# Setting the aspect ratio to 1 (1 unit in x and y corresponds\n#   to the same number of pixels).\ngg3 &lt;- gg + coord_fixed()\n\n# Defining identical axis limits for x and y.\ngg3 &lt;- gg3 + xlim(r) + ylim(r)\n\n# Cow (column-wise) plot, combine all figures into one.\nlibrary(cowplot)\nplot_grid(gg, gg2, gg3, rel_widths=c(4, 2, 2), nrow=1)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nFigure 2: A demonstration showing how visual perception is influenced by the aspect ratio.\n\n\n\nLines\nLines introduce an order, a sequence. If there is no order, data should not be interconnected by lines. If different line types indicate different groups that have an inherent order, it is helpful if the chosen line styles have an order, too (example: line thickness, dash density, or darkness of colour increases with values from the lowest to the highest group).\n\n\nPoints\nPoint symbols should be chosen such that the visualisation displays the data in a meaningful way. If thousands of data points are to be shown, open circles or smaller filled symbols are better than overlapping filled symbols. If the data are discrete and observations overlay, consider jittering the data gently for a better visualisation.\n\n\nColours\nColours should serve a purpose such as helping to identify different groups. Colours for pure decoration are discouraged. \n\n\nAxes\n\nOrigins and limits\nAxis ranges should generally start at 0 unless there is a good reason for choosing other ranges. If the data do not contain negative values, the axis should not stretch into negative values and in particular not have tick marks at negative values.\nIf relative changes or ratios are displayed, the corresponding axis should be logarithmic (such that, e.g., 1/4 has the same distance to the reference point, 1, as 4) and symmetric around the point of no change. An auxiliary line at the point of no change can facilitate interpretation. Axis tickmarks and auxiliary grey lines will facilitate reading off values, avoiding wrong linear interpolation by the viewer. Axis tick mark labels should indicate the ratio (e..g, “1/4” instead of 0.25).\nIf the data displayed as x and as y are comparable, axis limits should be identical and the figure square, such that distances are consistent in the x- and in the y-direction.\nExample: The figure below illustrates that the deliberate choice of axis limits (here, y-axis limits) can make a big difference to perception, and therefore interpretation, by the reader. The only difference between the three panels is the y-axis range.\n\n\nFigure 3: A demonstration of how visual impression can be driven by the choice of axis limits. Note: there is no R code for this figure. R makes it hard to omit 0 on the y-axis of barcharts (for a reason). This figure was instead created in Excel.\n\n\n\nLinear and logarithmic axes\nExample: Let’s say that you want to know whether some variable, y, changes (compared to a reference or baseline measurement) depending on another variable, x. For example, does blood pressure change with treatment?\nFigure 4 shows data with, on average, no change compared to a reference (baseline) measurement (red horizontal line) – approximately half the data are below and above the point of no change. However, this is not easily apparent from the top-left panel, which uses a linear axis, and so space is allocated asymmetrically in the vertical direction -- both up and down – away from the reference line. In the top-right panel, which uses a logarithmic axis, the relatively even spread of the data points around the reference line is clear to see.\n\n\nCode\n# Naïve plot of y vs x. If there is no change (on average), \n# half the data are below the line of no change.\n# Asymmetric view, and it depends on y/x or x/y.\n\nset.seed(33838)\nx &lt;- data.frame(\n  x=rlnorm(200, 2, 0.2),\n  y=rlnorm(200, 0.2, 0.75)\n)\n# Add an outlier manually.\nx &lt;- rbind(x, data.frame(x=quantile(x$x, 0.8), y=max(x$y)*1.5))\n\n# ---\n# Plotting.\n\nlibrary(ggplot2)\n# Scatterplot of y vs x.\ngg &lt;- ggplot(x, aes(x=x, y=y)) + geom_point() + theme_bw()\ngg &lt;- gg + geom_hline(yintercept=1, color=\"firebrick\", linewidth=2)\ngg &lt;- gg + xlab(\"x-variable\") + ylab(\"Fold-change\")\ngg\n\n\n\n\n\nCode\n# Logarithmic axes, symmetric range (!):\nxbr &lt;- c(1/10, 1/5, 1/2, 1, 2, 5, 10)\ngg &lt;- gg + scale_y_continuous(breaks=xbr, trans=\"log10\",\n  limits=max(abs(x$y))^c(-1, 1))\nprint(gg)\n\n\n\n\n\nCode\n# Second axis:\ngg &lt;- gg + scale_y_continuous(\n  breaks=xbr,\n  labels=paste(100*xbr, \"%\", sep=\"\"),\n  trans=\"log10\",\n  limits=max(abs(x$y))^c(-1, 1),\n  sec.axis=sec_axis(trans=~.*1, breaks=xbr,\n  labels=ifelse(xbr &lt; 1, paste(\"1/\", 1/xbr, sep=\"\"), xbr))\n)\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nCode\nprint(gg)\n\n\n\n\n\nCode\n# ---\n# Univariate distribution (histogram).\n\ngg &lt;- ggplot(x, aes(x=y)) + theme_bw() + xlab(\"Fold-change\")\ngg &lt;- gg + geom_histogram(color=\"firebrick\", fill=\"gray\")\nprint(gg)\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nCode\n# Symmetric range, log scale.\ngg &lt;- gg + scale_x_continuous(\n  breaks=xbr,\n  labels=ifelse(xbr &lt; 1, paste(\"1/\", 1/xbr), xbr),\n  trans=\"log10\",\n  limits=max(abs(x$x))^c(-1, 1)\n)\nprint(gg)\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nFigure 4: [caption to be added]\n\n\n\n\nSymbols\nSymbols should be intuitive (for example, “+” for a positive outcome, “-” for a negative outcome, “O” for a neutral outcome). In an ideal case, symbols require only a single look at the legend to subsequently focus on the visualisation. \nSymbols such as triangles, circles, and squares do not have an intuitive connotation. However, if there is an order in the data, it might be reflected in the order of the symbols, e.g., the number of vertices (circle, dash, triangle, square, pentagon, etc.).\n\n\nLegends\nLegends should not attract too much attention and certainly not cover up data. They should be placed in the margins of the figure or can be captured in a small text below the figure. \n\n\nOrientation\nResearch has shown that the human eye is better at following imaginary vertical lines than horizontal lines. Horizontal boxplots allow for a more accurate visual comparison than vertical boxplots.\n\n\nAuxiliary elements\nGenerally speaking, when designing a data visualisation, we need to be wary of what Tufte calls “chart junk” – any element of a chart that does not add to or enhance the information on display. Data are, of course, the star of the show, so should receive the most space. Meanwhile, all additional elements (lines, colours, symbols, etc.) should be assessed for their contribution to the interpretation of the data. If there is no contribution, they can be removed. A typical example of a redundant element in a data visualisation is a figure that has 5 panels (sub-figures or facets), each with x- and y-axis. To allow for efficient comparison of the data shown in the different panels, a single y-axis suffices if the panels are all aligned on a single row. This creates more space for the data and synchronises y-axis limits and data positions as a side benefit. \nSome helpful additional elements can include lines at relevant points. Examples include a vertical line at x=0 (e.g., for time 0), a horizontal line at y=0 (e.g., to indicate the point of no change, or a diagonal (at y=x, e.g., to indicate no difference between x and y). Consider whether the auxiliary element is better plotted under or over the data (which generally depends on the sequence of adding graphics elements).\nA local scatterplot smoother (loess, lowess, polynomial) can be particularly helpful to identify relationships with limited model assumptions. The confidence band (pointwise confidence intervals) should only be shown if relevant.\nExample: Figure 5 displays changes from a starting point (time 0) over time. A plain figure (left panel) requires the reader to read the y-axis labels to identify the point of no change (y=0). The addition of a line (middle panel) indicating the point of no change makes reading easier, and choosing an axis range symmetric around the point of no change (right panel) allocates changes up to the upper half of the visualisation and changes down to the lower half.\n\n\nCode\n# Function for data set generation.\nmake.data &lt;- function(\n  x=c(0, 0.5, 1, 2, 4, 8, 12, 16, 24),\n  y=exp(-0.2*x) - exp(-0.21*x),\n  sd=0.25, # std dev of y\n  seed=4384590,\n  n=50\n)\n{\n  # Setting the random number seed for reproducibility.\n  set.seed(seed)\n  # Creation of x- and y-variables.\n  x2 &lt;- rep(x, n)\n  y2 &lt;- NULL\n  for(i in 1:n)\n    y2 &lt;- c(y2, y*(2*(n/4-i)) + rlnorm(length(y), sd=sd))\n\n  # Creation of an identifier for each profile.\n  ID &lt;- factor(rep(1:n, rep(length(y), n)))\n\n  # Composition of the data set.\n  df &lt;- data.frame(PD=100*y2, time=x, ID=ID)\n\n  # Addition of a baseline variable.\n  BL &lt;- df[df$time==0, c(\"ID\", \"PD\")]\n  names(BL) &lt;- c(\"ID\", \"BL\")\n  df &lt;- merge(df, BL)\n\n  # Addition of change from baseline.\n  df$Change &lt;- df$PD - df$BL\n\n  # Definition of treatment.\n  df$trt &lt;- ifelse(df$BL &gt; mean(df$BL), \"active\", \" placebo\")\n\n  return(df)\n}\n\n# Generate the data.\nx &lt;- make.data()\n\n# ---\n# Figures.\n\nlibrary(ggplot2)\ngg &lt;- ggplot(x, aes(x=time, y=Change, group=ID, color=ID))\ngg &lt;- gg + theme_bw()\ngg &lt;- gg + xlab(\"Time [h]\") + ylab(\"Change from baseline\")\ngg &lt;- gg + geom_line(linewidth=1.1) + theme(legend.position=\"none\")\ngg &lt;- gg + facet_grid(.~trt)\n\n# Addition of an auxiliary line at y=0.\ngg2 &lt;- gg + geom_hline(yintercept=0, linewidth=1.2)\n\n# Symmetric y-axis limits.\ngg3 &lt;- gg2 + ylim(c(-1, 1)*max(abs(x$Change)))\n\n# Arranging all plots into one figure.\nlibrary(cowplot)\nplot_grid(gg, gg2, gg3, nrow=1)\n\n\n\n\n\n\nFigure 5: [caption to come - also need to fix height of panels]\n\n\n\nHigher dimensions\nThree-dimensional displays of data may look striking, in some respects, but accurate reading and interpretation is not straightforward with such presentations.\nExample: The left panel of Figure 6 displays a single number, 10, as a 3D bar chart. The correct identification of the value is indicated by the red \"X\": the height of the bar must be projected against the rear wall (the axis) from the viewing position. The figure on the right positions bars on a tilted surface, resulting in perceived height differences when there are none: the same four numbers, 10, 20, 30, and 40, are shown in each row and column.\n\n\nFigure 6: A demonstration of the difficulty of reading off data values from 3D charts. Note: again, as with Figure 3, this figure is produced in Excel, not in R."
  },
  {
    "objectID": "docs/principles.html#elements-of-tables",
    "href": "docs/principles.html#elements-of-tables",
    "title": "3. Principles of data visualisation",
    "section": "3.2 Elements of tables",
    "text": "3.2 Elements of tables\nTables can be an efficient means of visualisation, just like graphics – and they also can be misleading or cumbersome to read if not properly presented. Tables should in particular be considered for a small number of data points or if precise numbers are to be shown. For example if numbers need to be overlaid on graphics to aid readability and interpretation (for example, appending digits to the end of the bars in a barchart), one might consider omitting the graphic entirely and displaying the numbers as a table.\nTables have design elements just like graphics. Some of them are discussed in the following.\n\nLayout\nOne design element for tables is the layout, i.e., rows and columns. The layout should be chosen actively with the reader in mind. It is generally easier to compare numbers vertically than horizontally.\n\n\nDigits\nThe number of digits should be consistent within a table row or column (i.e., the same variable) but can differ across variables (e.g., if the table contains small and large numbers). Unnecessary precision should be avoided, a lower number of digits might facilitate reading and comparison.\n\n\nAlignment\nNumbers should be right-aligned to allow for easy identification of large and small numbers. In this way, large numbers literally stick out.\n\n\nMultiple numbers in table cells\nIf table cells contain more than a single value (e.g., means and confidence intervals), it should be considered if there is a better way to display the data for easy reading. Options include splitting the numbers into multiple table cells, rows, or columns, or reducing the font size for the less relevant numbers (e.g., means might be more important than confidence intervals).\n\n\nOrientation\nLandscape orientation is discouraged unless it cannot be avoided. Rotating a document in order to read a part of it is cumbersome for the reader, whether in print or on screen. Splitting a table into two might be a remedy to avoid landscape orientation – but one will need to consider whether splitting the table makes important comparisons more difficult to achieve.\n\n\nFonts and colours\nDifferent fonts and colours can be used if these serve a purpose, such as highlighting a particular value. Use of different fonts or colours for decorative purposes is discouraged."
  },
  {
    "objectID": "docs/styling.html",
    "href": "docs/styling.html",
    "title": "6. Styling your charts",
    "section": "",
    "text": "The two charts below show the same data using the same type of chart - guinea pig tooth growth data visualised on a horizontal bar chart. However, the clarity of the two charts is distinctly different. The choice of colours, addition of text annotations, change of font size, and more informative labels make the chart on the right hand side much easier to interpret. In this section, we’ll explore each of these elements in detail, and discuss how to style different elements of charts to improve accessibility and interpretability of your data visualisations.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nplot_data &lt;- ToothGrowth %&gt;%\n  mutate(dose = factor(dose)) %&gt;%\n  group_by(dose, supp) %&gt;%\n  summarise(len = mean(len)) %&gt;%\n  ungroup()\n\n# Unstyled plot\nggplot(\n  data = plot_data,\n  mapping = aes(x = len, y = dose, fill = supp)\n) +\n  geom_col(position = \"dodge\")\n\n# Styled plot\nggplot(\n  data = plot_data,\n  mapping = aes(x = len, y = dose, fill = supp)\n) +\n  geom_col(\n    position = position_dodge(width = 0.7),\n    width = 0.7\n  ) +\n  scale_x_continuous(\n    limits = c(0, 30),\n    name = \"Tooth length\"\n  ) +\n  geom_text(\n    mapping = aes(label = round(len, 0)),\n    position = position_dodge(width = 0.7),\n    hjust = 1.5,\n    size = 6,\n    fontface = \"bold\",\n    colour = \"white\"\n  ) +\n  scale_fill_manual(values = c(\"#9B1D20\", \"#3D5A80\")) +\n  labs(\n    title = \"Tooth Growth\",\n    subtitle = \"Each of 60 guinea pigs received one of three dose levels of\n       vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods:\n       &lt;span style='color: #9B1D20'&gt;**orange juice**&lt;/span&gt; or &lt;span style='color: #3D5A80'&gt;\n       **ascorbic acid**&lt;/span&gt;.\",\n    y = \"Dosage (mg/day)\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_textbox_simple(face = \"bold\"),\n    plot.subtitle = element_textbox_simple(\n      margin = margin(t = 10),\n      lineheight = 1.5\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15),\n    panel.grid = element_blank(),\n    axis.text.x = element_blank()\n  )\n\n\n\n\n\nBefore and after bar charts visualising tooth growth of guinea pigs"
  },
  {
    "objectID": "docs/styling.html#principles-of-styling-charts",
    "href": "docs/styling.html#principles-of-styling-charts",
    "title": "6. Styling your charts",
    "section": "",
    "text": "The two charts below show the same data using the same type of chart - guinea pig tooth growth data visualised on a horizontal bar chart. However, the clarity of the two charts is distinctly different. The choice of colours, addition of text annotations, change of font size, and more informative labels make the chart on the right hand side much easier to interpret. In this section, we’ll explore each of these elements in detail, and discuss how to style different elements of charts to improve accessibility and interpretability of your data visualisations.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nplot_data &lt;- ToothGrowth %&gt;%\n  mutate(dose = factor(dose)) %&gt;%\n  group_by(dose, supp) %&gt;%\n  summarise(len = mean(len)) %&gt;%\n  ungroup()\n\n# Unstyled plot\nggplot(\n  data = plot_data,\n  mapping = aes(x = len, y = dose, fill = supp)\n) +\n  geom_col(position = \"dodge\")\n\n# Styled plot\nggplot(\n  data = plot_data,\n  mapping = aes(x = len, y = dose, fill = supp)\n) +\n  geom_col(\n    position = position_dodge(width = 0.7),\n    width = 0.7\n  ) +\n  scale_x_continuous(\n    limits = c(0, 30),\n    name = \"Tooth length\"\n  ) +\n  geom_text(\n    mapping = aes(label = round(len, 0)),\n    position = position_dodge(width = 0.7),\n    hjust = 1.5,\n    size = 6,\n    fontface = \"bold\",\n    colour = \"white\"\n  ) +\n  scale_fill_manual(values = c(\"#9B1D20\", \"#3D5A80\")) +\n  labs(\n    title = \"Tooth Growth\",\n    subtitle = \"Each of 60 guinea pigs received one of three dose levels of\n       vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods:\n       &lt;span style='color: #9B1D20'&gt;**orange juice**&lt;/span&gt; or &lt;span style='color: #3D5A80'&gt;\n       **ascorbic acid**&lt;/span&gt;.\",\n    y = \"Dosage (mg/day)\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_textbox_simple(face = \"bold\"),\n    plot.subtitle = element_textbox_simple(\n      margin = margin(t = 10),\n      lineheight = 1.5\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15),\n    panel.grid = element_blank(),\n    axis.text.x = element_blank()\n  )\n\n\n\n\n\nBefore and after bar charts visualising tooth growth of guinea pigs"
  },
  {
    "objectID": "docs/styling.html#fonts",
    "href": "docs/styling.html#fonts",
    "title": "6. Styling your charts",
    "section": "Fonts",
    "text": "Fonts\nFont choice is a key component of making your data visualisations easy to understand. Some fonts are easier to read than others, and this is particularly true for those with visual impairments, or a learning disability such as dyslexia. A poor choice of font may make your visualisation inaccessible to a significant number of people in your audience.\nTry to minimise the number of different types of font you use: use a fixed set of sizes, a maximum of two different font families, and minimise the use of mixing font faces. This all helps to reduce unnecessary work from a reader when they look at your visualisation.\n\nFont size\nLarger fonts are easier to read. It’s generally recommended that font size is at least 12pt for printed materials or websites. If you’re creating a presentation, fonts should be at least 36pt to make sure they’re visible to people nearer the back of the room.\n\n\nFont family\nSo what makes a good choice of font family? There is no consensus as to which type of font (serif, sans serif, or monospace) is more accessible. The simpler characters of sans serif fonts may increase readability for visually impaired readers, while those with dyslexia may find the characters more difficult to tell apart. Serif fonts (such as Times New Roman) can be more difficult to read as the decorative lines distract from the shape of the letter. This is especially true in digital publications where on-screen pixelation can further distort the letters. We’d recommend avoiding serif fonts for any text in images that will appear online.\nCommon sans serif fonts such as Arial, Calibri, and Verdana are often considered to be accessible. Dyslexie and OpenDyslexic are fonts specifically designed to aid readability for those with dyslexia, as they increase font weight at the bottom of the letters which reduces how much the letters appear to move around. Atkinson Hyperlegible is a font developed by the Braille Institute of America, which is designed to maximise distinction between different characters for low vision readers . It’s freely available, and can be downloaded from the Braille Institute or used through Google Fonts. Some fonts, particularly sans serif fonts, have characters which appear very similar to other characters. For example, a capital I, lowercase l, and number 1, can sometimes be indistinguishable. Choose a font face with a distinguishable feature for each letter and number.\n\n\nFont face\nFont faces, e.g. bold or italic effects can be used to emphasise particular parts of text. For example, a plot annotation may highlight a specific value placed in amongst some explanatory text. Italicised text is generally considered more difficult to read, as is capitalised text when used for the purpose of emphasis. Instead, use bold text to highlight (sparingly).\n\n\nChecklist\nAs you can see, there is no single font recommendation that will ensure your visualisation is accessible to all. However, there are some things you can do to maximise accessibility.\n\nEnsure the font size is at least 12pt.\nEnsure that a capital I, lowercase l, and number 1 are distinguishable.\nMinimise the number of different fonts used (no more than two).\nMinimise the use of italics and uppercase text, instead (sparingly) use bold text for emphasis."
  },
  {
    "objectID": "docs/styling.html#colours",
    "href": "docs/styling.html#colours",
    "title": "6. Styling your charts",
    "section": "Colours",
    "text": "Colours\nAs with font choices, colour choices can strongly impact the accessibility of your data visualisation. The correct use of colour can also help to emphasise the story you are trying to tell.\nBefore you get into choosing colours, ask yourself the question: do I really need to use colour here? Beecham et al showed that the use of colour is one of the least effective methods for visually communicating differences between variables. Both accessibility and interpretability improve when using fewer colours.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nplot_data &lt;- mtcars %&gt;%\n  mutate(car = rownames(mtcars))\n\n# Colour all bars\nggplot(\n  data = plot_data,\n  mapping = aes(\n    y = reorder(car, disp),\n    x = disp,\n    fill = car\n  )\n) +\n  geom_col() +\n  labs(\n    x = \"Variable 1\",\n    y = \"\"\n  ) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    legend.title = element_blank(),\n    plot.title = element_text(\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n# Highlight one bar\nggplot(\n  data = plot_data,\n  mapping = aes(\n    y = reorder(car, disp),\n    x = disp,\n    fill = (car == \"Maserati Bora\")\n  )\n) +\n  geom_col() +\n  scale_fill_manual(values = c(\"#AFE1AF\", \"#7a9d7a\")) +\n  labs(\n    x = \"Variable 1\",\n    y = \"\"\n  ) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    legend.title = element_blank(),\n    plot.title = element_text(\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n\n\n\n\nBefore and after bar charts visualising car data showing colouring vs highlighting\n\n\nIn the bar chart example above, rather than duplicating the information on the y-axis and colouring each bar a different colour, a better approach is to use colour to highlight a specific element of the data e.g. a specific car, which focuses the reader’s attention straight to the point you are trying to make.\nIt’s useful not to rely on colour as the only factor which distinguishes data points in different groups. For example, in scatter plots, as well as colouring points in two groups either green or orange, the points code be encoded as circles and triangles.\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nwheels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv\")\nplot_data &lt;- wheels %&gt;%\n  select(country, height, diameter) %&gt;%\n  drop_na() %&gt;%\n  filter(country %in% c(\"USA\", \"Japan\"))\n\n# Colour only\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = diameter,\n    y = height,\n    colour = country\n  )\n) +\n  geom_point(size = 3, alpha = 0.8) +\n  scale_x_continuous(limits = c(0, 800)) +\n  scale_y_continuous(limits = c(0, 800)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  coord_cartesian(expand = FALSE) +\n  labs(\n    title = \"Ferris wheels\",\n    x = \"Diameter (ft)\",\n    y = \"Height (ft)\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    plot.title = element_text(\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n# Shapes and colours\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = diameter,\n    y = height,\n    colour = country,\n    shape = country\n  )\n) +\n  geom_point(size = 3, alpha = 0.8) +\n  scale_x_continuous(limits = c(0, 800)) +\n  scale_y_continuous(limits = c(0, 800)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  coord_cartesian(expand = FALSE) +\n  labs(\n    title = \"Ferris wheels\",\n    x = \"Diameter (ft)\",\n    y = \"Height (ft)\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    plot.title = element_text(\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n\n\n\n\nBefore and after scatterplots visualising Ferris wheel data showing only dots, vs, dots and triangles to differentiate groups\n\n\nDespite the difficulties that can arise from ineffectively using colour, it’s still one of the most common methods for either distinguishing between categories, or showing changes in a value. When you decide to use colours, you then need to decide which colours to use.\n\nTypes of colour palette\nColour palettes generally fall into one of three categories, and the type of colour palette you choose should reflect the type of data you are visualising.\n\nSequential: used to visualise data that is ordered from low to high (or vice versa) e.g. temperature.\nDiverging: used to visualise data that is ordered and diverges from an important midpoint e.g. days of above or below average temperature.\nQualitative: used to visualise categorical data, where the magnitude of difference between, and ordering of, categories is not important e.g. distinct railway lines.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(PrettyCols)\n\n# Sequential\nggplot(\n  data = data.frame(x = 1:7, y = 1),\n  mapping = aes(x = x, y = y, fill = x)\n) +\n  geom_tile() +\n  labs(title = \"Sequential\") +\n  scale_fill_pretty_c(\"Teals\") +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n# Diverging\nggplot(\n  data = data.frame(x = 1:7, y = 1),\n  mapping = aes(x = x, y = y, fill = x - mean(x))\n) +\n  geom_tile() +\n  labs(title = \"Diverging\") +\n  scale_fill_gradient2(low = \"#f1a340\", high = \"#998ec3\") +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n# Qualitative\nggplot(\n  data = data.frame(x = 1:7, y = 1),\n  mapping = aes(x = x, y = y, fill = factor(x))\n) +\n  geom_tile() +\n  labs(title = \"Qualitative\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n\n\n\n\nDifferent types of colour palettes\n\n\n\n\nAccessible colour palettes\nWhen choosing a particular colour palette, there are several important factors to consider:\nColours should be distinct from each other, for all readers. There are several different forms of colour blindness which can cause some colours to appear indistinguishable. The use of a colour blind checker can show you what your plots may look like under different types of colour blindness. This is particularly important for diverging and qualitative palettes where the distinction between hues is used to tell apart different values. In contrast, sequential palettes often use luminosity to show how values change. Paul Tol has some very useful resources on choices of colours, and several suggested palettes.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(colourblindr)\nplot_data &lt;- ToothGrowth %&gt;%\n  mutate(dose = factor(dose)) %&gt;%\n  group_by(dose, supp) %&gt;%\n  summarise(len = mean(len)) %&gt;%\n  ungroup()\n\ng &lt;- ggplot(\n  data = plot_data,\n  mapping = aes(x = len, y = dose, fill = supp)\n) +\n  geom_col(\n    position = position_dodge(width = 0.7),\n    width = 0.7\n  ) +\n  scale_x_continuous(\n    limits = c(0, 30),\n    name = \"Tooth length\"\n  ) +\n  geom_text(\n    mapping = aes(label = round(len, 0)),\n    position = position_dodge(width = 0.7),\n    hjust = 1.5,\n    size = 6,\n    fontface = \"bold\",\n    colour = \"white\"\n  ) +\n  scale_fill_manual(values = c(\"#9B1D20\", \"#3D5A80\")) +\n  labs(\n    title = \"Tooth Growth\",\n    subtitle = \"Each of 60 guinea pigs received one of three dose levels of\n       vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods:\n       &lt;span style='color: #9B1D20'&gt;**orange juice**&lt;/span&gt; or &lt;span style='color: #3D5A80'&gt;\n       **ascorbic acid**&lt;/span&gt;.\",\n    y = \"Dosage (mg/day)\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_textbox_simple(face = \"bold\"),\n    plot.subtitle = element_textbox_simple(\n      margin = margin(t = 10),\n      lineheight = 1.5\n    ),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15),\n    panel.grid = element_blank(),\n    axis.text.x = element_blank()\n  )\n\ncvd_grid(g)\n\n\n\n\n\nThe simulated appearance of the same bar chart with different types of colour blindness\n\n\nColours should appear distinct from each other when printed in black and white. Readers, or indeed academic journals, may choose to print your visualisations in monochrome. Colours that seem visually distinct that have similar luminosity (a measure of how light or dark a hue is) may appear indistinguishable when printed in black and white.\nColours should appropriately match your data. It’s important not to play into stereotypes e.g. choosing pink and blue for data relating to women and men. Don’t confuse your readers by flipping common colour associations around, e.g. red for good and green for bad. Lisa Muth wrote an article for Datawrapper discussing the use of colour to display gender data, and many of the points can be extended to other types of data.\n\n\nChecklist\n\nMinimise the number of different colours used.\nCheck that your colours are colour blind friendly, and have sufficient contrast when viewed in monochrome.\nCheck that the type of colour palette matches the type of data visualised.\nUse non-colour elements to distinguish between different groups where possible.\nAvoid stereotypes and confusing associations with different colours."
  },
  {
    "objectID": "docs/styling.html#annotations",
    "href": "docs/styling.html#annotations",
    "title": "6. Styling your charts",
    "section": "Annotations",
    "text": "Annotations\nWhen talking about adding annotations to data visualisations, we simply mean adding text that adds a comment or clarification in order to help the reader understand the point made in the graphic. Annotations can be used to add details or explanation, highlight an interesting data point, or clarify how the chart should be interpreted. Although additional text can be extremely useful to a reader, it’s important not to overload a data visualisation with text as it can be distracting and make it more difficult to focus the point.\nA common use of annotation that enhances clarity of data visualisations is directly labelling data points on line graphs or bar charts. In line graphs, it’s common to label the value at the end of the line as it’s often far away from the y-axis labels (on the left by default). In bar charts, adding the values for each bar at, or near, the end of each bar also means readers don’t have to look up the values themselves. This can reduce the amount of eye movement required for readers to find the exact values and allows them to make better, more accurate comparisons. This isn’t always required if, for example, these values are additionally provided in a table.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nplot_data &lt;- ToothGrowth %&gt;%\n  mutate(dose = factor(dose)) %&gt;%\n  group_by(dose, supp) %&gt;%\n  summarise(len = mean(len)) %&gt;%\n  ungroup()\n\n# Not annotated\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = len,\n    y = dose,\n    fill = supp\n  )\n) +\n  geom_col(\n    position = position_dodge(width = 0.7),\n    width = 0.7\n  ) +\n  scale_x_continuous(\n    limits = c(0, 30),\n    name = \"Tooth length\"\n  ) +\n  scale_fill_manual(\n    name = \"Supplement: \",\n    values = c(\"#9B1D20\", \"#3D5A80\")\n  ) +\n  labs(\n    title = \"Tooth Growth\",\n    y = \"Dose\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n# Annotated\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = len,\n    y = dose,\n    fill = supp\n  )\n) +\n  geom_col(\n    position = position_dodge(width = 0.7),\n    width = 0.7\n  ) +\n  scale_x_continuous(\n    limits = c(0, 30),\n    name = \"Tooth length\"\n  ) +\n  geom_text(\n    mapping = aes(label = round(len, 0)),\n    position = position_dodge(width = 0.7),\n    hjust = 1.5,\n    size = 6,\n    fontface = \"bold\",\n    colour = \"white\"\n  ) +\n  scale_fill_manual(\n    name = \"Supplement: \",\n    values = c(\"#9B1D20\", \"#3D5A80\")\n  ) +\n  labs(\n    title = \"Tooth Growth\",\n    y = \"Dose\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15, 10, 10, 15)\n  )\n\n\n\n\n\nBefore and after adding annotations to label a bar chart\n\n\nThe placement of annotations is also key:\n\nIn a scatter plot, directly labelling every data point isn’t usually an option as there are too many points to label without clutter. Instead, you may choose to highlight only one or two interesting points, such as outliers.\nWhen adding more extensive text to explain an outlier or point of interest, place the text in a relevant position. For example, if you’re annotating a line chart to explain a decrease in value in 2008 - position the text near to 2008.\nDon’t fill every white space with text. The ONS recommends a maximum of 3 or 4 annotations per chart to avoid overwhelming readers. This also means keeping annotations brief and to the point. This is especially true for data visualisations that accompany journal publications or magazine articles where further textual explanation is likely included already.\n\nWhen choosing the font size, family, face, and colour of the annotation text, the same advice applies as given in the previous sections. It’s particularly important to check there is sufficient contrast between the background colour and the text colour.\n\nChecklist\n\nCheck if there are outliers that need further explanation, or values that could be directly labelled.\nLabels are positioned sensibly, and the data visualisation does not feel crowded with text.\nMake sure there is sufficient contrast between the text and the background."
  },
  {
    "objectID": "docs/styling.html#alt-text",
    "href": "docs/styling.html#alt-text",
    "title": "6. Styling your charts",
    "section": "Alt Text",
    "text": "Alt Text\nAlt text is text that describes the visual aspect and purpose of an image - including charts. Though alt text has various uses - its primary purpose is to aid visually impaired users in interpreting images when the alt text is read aloud by screen readers.\nIn a recent a Significance article, Mine Dogucu discussed the importance of adding alt text to your data visualisations, to ensure those who are blind or visually impaired don’t miss out on the content in your charts. This Medium article by Amy Cesal provides a simple structure to aid you in writing alt text for data visualisations."
  },
  {
    "objectID": "docs/why-visualise.html",
    "href": "docs/why-visualise.html",
    "title": "2. Why do we visualise data?",
    "section": "",
    "text": "Data visualisations can be a very efficient means of identifying patterns in data and conveying a message. The scientific aim of any visualisation is to allow the reader to understand data:\n\nintuitively;\nefficiently; and\naccurately. \n\nIf designed and executed successfully, a data visualisation will:\n\n\nGrab attention\n\nIn a sea of text, a visualisation will stand out. If a reader is short of time or not convinced that the content might be interesting, visuals are frequently key in deciding whether or not to study the entire document.\n\n\n\nImprove access to information\n\nTextual descriptions can be lengthy and hard to read, while skillfully created visualisations permit the extraction of key information more efficiently, making information extraction a fun task.\n\n\n\nIncrease precision\n\nTextual descriptions are frequently less precise than a visual depiction showing data points and corresponding axes, while a text with too many precise numbers can make it hard to follow a line of argument.\n\n\n\nAdd credibility\n\nWhile a textual summary provides a story, a visualisation of the data themselves can add credibility to otherwise unsubstantiated claims about the data: readers can see the numbers for themselves and arrive at the same conclusions.\n\n\n\nSummarise content\n\nVisual displays allow for summarising complex textual content, aiding the reader in memorising key points.\n\n\n\nFor these reasons, data visualisations are key elements in almost any kind of publication – scientific papers, media reports, conference presentations, etc.\nTables, too, are a way to visualise data or statistics, and can be similarly important components of a publication. A table may in some cases visualise data better than a graphic. For example, five numbers are probably better displayed in a table than in a complex pie chart that uses colours, angles, and possibly shading and more than two dimensions."
  },
  {
    "objectID": "docs/why-visualise.html#motivation",
    "href": "docs/why-visualise.html#motivation",
    "title": "2. Why do we visualise data?",
    "section": "",
    "text": "Data visualisations can be a very efficient means of identifying patterns in data and conveying a message. The scientific aim of any visualisation is to allow the reader to understand data:\n\nintuitively;\nefficiently; and\naccurately. \n\nIf designed and executed successfully, a data visualisation will:\n\n\nGrab attention\n\nIn a sea of text, a visualisation will stand out. If a reader is short of time or not convinced that the content might be interesting, visuals are frequently key in deciding whether or not to study the entire document.\n\n\n\nImprove access to information\n\nTextual descriptions can be lengthy and hard to read, while skillfully created visualisations permit the extraction of key information more efficiently, making information extraction a fun task.\n\n\n\nIncrease precision\n\nTextual descriptions are frequently less precise than a visual depiction showing data points and corresponding axes, while a text with too many precise numbers can make it hard to follow a line of argument.\n\n\n\nAdd credibility\n\nWhile a textual summary provides a story, a visualisation of the data themselves can add credibility to otherwise unsubstantiated claims about the data: readers can see the numbers for themselves and arrive at the same conclusions.\n\n\n\nSummarise content\n\nVisual displays allow for summarising complex textual content, aiding the reader in memorising key points.\n\n\n\nFor these reasons, data visualisations are key elements in almost any kind of publication – scientific papers, media reports, conference presentations, etc.\nTables, too, are a way to visualise data or statistics, and can be similarly important components of a publication. A table may in some cases visualise data better than a graphic. For example, five numbers are probably better displayed in a table than in a complex pie chart that uses colours, angles, and possibly shading and more than two dimensions."
  },
  {
    "objectID": "docs/why-visualise.html#a-brief-history-of-data-visualisation",
    "href": "docs/why-visualise.html#a-brief-history-of-data-visualisation",
    "title": "2. Why do we visualise data?",
    "section": "2.2 A brief history of data visualisation",
    "text": "2.2 A brief history of data visualisation\nVisualisation in itself has been a topic of scientific research for a long time. An early visualisation was created by Minard in 1861, depicting data from Napoleon’s march on Moscow in 1812/13 and his subsequent retreat (below).\n\n\n\n\n\n\nSource: Wikimedia Commons\n\nThe map shows latitude and longitude of the army as it moved. The line shows the direction of the move, and the line width represents the size of the army (the surviving soldiers). Particular locations were marked by the date of the army presence, and the temperature is shown, too. Six variables were elegantly woven into a single display (References: Tufte, The visual display of quantitative information; Corbett, Charles Joseph Minard, Mapping Napoleon’s March; Robinson AH, The thematic maps of Charles Joseph Minard).\nData were visualised by hand until computers came along. The first monitors and printers worked in text mode only, though, with a resolution of 25 rows and 80 columns or similar, not permitting much detail or precision. Graphics terminals and printers followed, and resolutions kept increasing with the development of laser printers.\nStatistical systems such as SAS enabled creation of data visualisations early on (reference to an early manual or other work needed).\nArguably the most consistent implementation of a graphics system was realised with ggplot (Wickham, 2011) based on Wilkinson’s “The Grammar of Graphics” (2005).\nA key component of ggplot2 is the feature of creating conditional displays. These allow for subsetting the data by the values of one or more variables. The concept was introduced by Cleveland (1993), showcasing a barley data set that was analysed in textbooks for decades until a visualisation strongly suggested an error in the data set – two years of crop yield of one variety at one of six farms were accidentally swapped. It took a visualisation to reveal what numerous numerical analyses had missed!\nCleveland named the display type “trellis”, being inspired by a trellis in his garden (Cleveland, 1993). The trellis concept was first implemented in S (Becker and Chambers, 1984) and S-PLUS (ref). When R (ref) came along, a package lattice was developed (Sarkar 2008) since trellis carried a trademark. With the advent of ggplot, the term faceting was introduced (with functions facet_grid and facet_wrap)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rssdatavisguide",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]